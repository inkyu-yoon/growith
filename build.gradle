plugins {
	id 'java'
	id 'org.springframework.boot' version '3.0.5'
	id 'io.spring.dependency-management' version '1.1.0'

	id 'jacoco'
}

group = 'com'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	//jpa 와 mysql
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	runtimeOnly 'com.mysql:mysql-connector-j'

	// 스프링 시큐리티
	implementation 'org.springframework.boot:spring-boot-starter-security'
	testImplementation 'org.springframework.security:spring-security-test'

	//탬플릿 엔진 관련
	implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'

	implementation 'org.springframework.boot:spring-boot-starter-web'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	// 편의 라이브러리
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	annotationProcessor 'org.projectlombok:lombok'

	// WebClient
	implementation 'org.springframework.boot:spring-boot-starter-webflux'

	// jwt 토큰
	implementation 'io.jsonwebtoken:jjwt:0.9.1'
	implementation 'javax.xml.bind:jaxb-api:2.3.0'

	// MockStatic을 위한 라이브러리
	testImplementation group: 'org.mockito', name: 'mockito-inline', version: '5.2.0'

	// WebClient 테스트 코드를 위한 MockWebServer
	testImplementation group: 'com.squareup.okhttp3', name: 'mockwebserver', version: '5.0.0-alpha.11'
	implementation group: 'com.squareup.okhttp3', name: 'okhttp', version: '5.0.0-alpha.11'

	// Wiremock
	implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-contract-stub-runner', version: '4.0.2'

	// 객체 json화
	implementation 'com.google.code.gson:gson:2.10.1'

	// == 스프링 부트 3.0 이상 == Querydsl
	implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
	annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
	annotationProcessor "jakarta.annotation:jakarta.annotation-api"
	annotationProcessor "jakarta.persistence:jakarta.persistence-api"

	// request dto 객체 유효성 검증
	implementation 'org.springframework.boot:spring-boot-starter-validation'

	// aop 사용
	implementation group: 'org.springframework.boot', name: 'spring-boot-starter-aop', version: '3.0.5'
	testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-aop', version: '3.0.5'

}

tasks.named('test') {
	useJUnitPlatform()
}
// === ⭐ QueryDsl 빌드 옵셥 ===
def querydslDir = "$buildDir/generated/querydsl"

sourceSets {
	main.java.srcDirs += [ querydslDir ]
}

tasks.withType(JavaCompile) {
	options.annotationProcessorGeneratedSourcesDirectory = file(querydslDir)
}

clean.doLast {
	file(querydslDir).deleteDir()
}

task copyPrivate(type: Copy) {
	copy {
		from './growith-env' //위 사진과 같은 폴더 명
		include "application-growith.yml" //위 폴더안에 있는 yml파일 명
		into 'src/main/resources' //복사할 위치
	}
}

jar {
	enabled = false
}


test {
	useJUnitPlatform()// JUnit5를 사용하기 위한 설정
	finalizedBy 'jacocoTestReport'  // Test 이후 커버리지가 동작하도록 finalizedBy 추가
}

jacoco {
	toolVersion = '0.8.8'
}

jacocoTestReport {
	dependsOn test
	reports {
		html.enabled true
		xml.enabled false
		csv.enabled false

		//리포트 위치 지정
		html.destination file('build/reports/myReport.html')

	}
	afterEvaluate {
		classDirectories.setFrom(
				files(classDirectories.files.collect {
					fileTree(dir: it, excludes: [
							'**/*Util*',
							'**/*Repository*',
							'**/Q*',
							'**/*View*',
							'**/*JoinController*',
							'**/*DetailsServiceImpl*',
							'**/*Application*',
							'**/*Request*',
							'**/*Response*',
							'**/*Config*',
							'**/*Constants*',
							'**/domain/**',
							'**/exception/**',
							'**/config/**'
					])
				})
		)
	}

	finalizedBy 'jacocoTestCoverageVerification'
}



// 검증 단계
jacocoTestCoverageVerification {
	violationRules {
		rule {
			enabled = true // 활성화
			element = 'CLASS' // 클래스 단위로 커버리지 체크
			includes = [
					'**/controller',
					'**/service'
			]

			// 라인 커버리지 제한을 80%로 설정
			limit {
				counter = 'LINE'
				value = 'COVEREDRATIO'
				minimum = 0.80
			}

			// 브랜치 커버리지 제한을 80%로 설정
			limit {
				counter = 'BRANCH'
				value = 'COVEREDRATIO'
				minimum = 0.80
			}

			// 빈 줄을 제외한 코드의 라인수를 최대 200라인으로 제한
			limit {
				counter = 'LINE'
				value = 'TOTALCOUNT'
				maximum = 200
			}

			excludes = [
					'**.*View*',
					'**.*Util*',
					'**.*JoinController*',
					'**.*DetailsServiceImpl*',
					'**.Q*',
					'**.*Repository*',
					'**.*Application',
					'**.*Request*',
					'**.*Response*',
					'**.*Config*',
					'**.*Constants*',
					'**.domain.**'
			]

		}
	}
}